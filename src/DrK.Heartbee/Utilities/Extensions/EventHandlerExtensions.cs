using System;
using System.ComponentModel;
using System.Threading.Tasks;

namespace DrK.Heartbee.Utilities.Extensions
{
    /// <summary>
    /// Provides extensions for the event handler classes.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static class EventHandlerExtensions
    {
        private static void InvokeIfInstantiated(object state)
        {
            Tuple<EventHandler, object, EventArgs> @params = (Tuple<EventHandler, object, EventArgs>)state;

            EventHandler @this = @params.Item1;
            object sender = @params.Item2;
            EventArgs e = @params.Item3;

            @this.InvokeIfInstantiated(sender, e);
        }

        /// <summary>
        /// Invokes an EventHandler if it is not null.
        /// </summary>
        /// <param name="this">
        /// The EventHandler to invoke.
        /// </param>
        /// <param name="sender">
        /// The object invoking the EventHandler.
        /// </param>
        /// <param name="e">
        /// Data for the EventHandler.
        /// </param>
        public static void InvokeIfInstantiated(this EventHandler @this, object sender, EventArgs e)
        {
            if (@this != null)
            {
                @this(sender, e);
            }
        }

        /// <summary>
        /// Invokes an EventHandler in a separate Task if it is not null.
        /// </summary>
        /// <param name="this">
        /// The EventHandler to invoke.
        /// </param>
        /// <param name="sender">
        /// The object invoking the EventHandler.
        /// </param>
        /// <param name="e">
        /// Data for the EventHandler.
        /// </param>
        /// <returns>
        /// The Task which the EventHandler will be invoked in.
        /// </returns>
        public static Task InvokeIfInstantiatedAsync(this EventHandler @this, object sender, EventArgs e)
        {
            Task @return = new Task(InvokeIfInstantiated, Tuple.Create(@this, sender, e));
            @return.Start();
            return @return;
        }

        private static void InvokeIfInstantiated<T>(object state)
            where T : EventArgs
        {
            Tuple<EventHandler<T>, object, T> @params = (Tuple<EventHandler<T>, object, T>)state;

            EventHandler<T> @this = @params.Item1;
            object sender = @params.Item2;
            T e = @params.Item3;

            @this.InvokeIfInstantiated(sender, e);
        }

        /// <summary>
        /// Invokes an EventHandler if it is not null.
        /// </summary>
        /// <typeparam name="T">
        /// The type of the event data generated by the event.
        /// </typeparam>
        /// <param name="this">
        /// The EventHandler to invoke.
        /// </param>
        /// <param name="sender">
        /// The object invoking the EventHandler.
        /// </param>
        /// <param name="e">
        /// Data for the EventHandler.
        /// </param>
        public static void InvokeIfInstantiated<T>(this EventHandler<T> @this, object sender, T e)
            where T : EventArgs
        {
            if (@this != null)
            {
                @this(sender, e);
            }
        }

        /// <summary>
        /// Invokes an EventHandler in a separate Task if it is not null.
        /// </summary>
        /// <typeparam name="T">
        /// The type of the event data generated by the event.
        /// </typeparam>
        /// <param name="this">
        /// The EventHandler to invoke.
        /// </param>
        /// <param name="sender">
        /// The object invoking the EventHandler.
        /// </param>
        /// <param name="e">
        /// Data for the EventHandler.
        /// </param>
        /// <returns>
        /// The Task which the EventHandler will be invoked in.
        /// </returns>
        public static Task InvokeIfInstantiatedAsync<T>(this EventHandler<T> @this, object sender, T e)
            where T : EventArgs
        {
            Task @return = new Task(InvokeIfInstantiated<T>, Tuple.Create(@this, sender, e));
            @return.Start();
            return @return;
        }
    }
}
